<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <title>Transações - Extrato</title>
  <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
    * {
      box-sizing: border-box;
      font-family: 'Inter', sans-serif;
    }

    body {
      background-color: #0d1117;
      color: #f0f6fc;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    .dashboard {
      background-color: #161b22;
      padding: 40px 50px;
      border-radius: 16px;
      box-shadow: 0 0 40px rgba(0, 255, 170, 0.05);
      width: 100%;
      max-width: 750px;
      max-height: 95vh;
      overflow-y: auto;
      text-align: center;
    }

    h2 {
      margin-bottom: 25px;
      color: #e6edf3;
    }

    .accounts {
      display: flex;
      flex-direction: column;
      gap: 12px;
      margin-bottom: 30px;
    }

    .account-card {
      background-color: #1f242c;
      border-left: 6px solid #00ffa8;
      padding: 15px 20px;
      border-radius: 12px;
      cursor: pointer;
      border: 2px solid transparent;
      text-align: left;
      transition: all 0.3s ease;
    }

    .account-card:hover {
      background-color: #242c34;
    }

    .account-card.active {
      border-color: #00cc88;
      background-color: #1a1f27;
    }

    .account-card h3 {
      margin: 0 0 8px;
      font-size: 17px;
      color: #ffffff;
    }

    .account-card p {
      margin: 3px 0;
      font-size: 14px;
      color: #c9d1d9;
    }

    .transactions {
      text-align: left;
      margin-top: 15px;
    }

    .transactions h3 {
      margin-bottom: 15px;
      color: #00ffa8;
    }

    .transaction {
      background-color: #1f242c;
      padding: 14px 18px;
      border-radius: 10px;
      margin-bottom: 12px;
      transition: all 0.3s ease;
    }

    .transaction p {
      margin: 5px 0;
      font-size: 14px;
      color: #c9d1d9;
    }

    .back {
      display: block;
      margin-top: 25px;
      text-align: center;
      color: #ff6b6b;
      font-weight: 600;
      text-decoration: none;
      transition: color 0.3s;
    }

    .back:hover {
      color: #ff3b3b;
    }
  </style>
</head>
<body>

<div id="app" class="dashboard">
  <h2 v-if="client">Selecione a conta:</h2>

  <div class="accounts">
    <div v-for="account in accounts" :key="account.id"
         class="account-card"
         :class="{ active: selectedAccountId === account.id }"
         @click="selectAccount(account)">
      <h3>Conta {{ account.type }}</h3>
      <p>Saldo: R$ {{ account.balance.toFixed(2) }}</p>
      <p>Status:
        <span :style="{ color: account.active ? '#00ffa8' : '#ff4c4c' }">
          {{ account.active ? 'Ativa' : 'Inativa' }}
        </span>
      </p>
    </div>
  </div>

  <div v-if="transactions.length > 0" class="transactions">
    <h3>Transações da Conta {{ selectedAccountType }}</h3>
    <div v-for="transaction in transactions" :key="transaction.id" class="transaction">
      <p><strong>Tipo:</strong>
        {{ transaction.transfer_id
            ? 'Transferência'
            : transaction.type === 'saque'
            ? 'Saque'
            : 'Depósito' }}
      </p>
      <p>
        <strong>{{ transaction.type === 'saque' ? 'Débito' : 'Crédito' }}:</strong>
        R$ {{ Number(transaction.amount).toFixed(2) }}
      </p>
      <p><strong>Data:</strong> {{ formatDate(transaction.created_at) }}</p>
    </div>
  </div>

  <div v-else-if="selectedAccountId">
    <p style="margin-top: 20px; color: #8b949e;">Não há transações para esta conta.</p>
  </div>

  <a href="/clients/auth" class="back">Voltar</a>
</div>

<script>
const { createApp } = Vue;

createApp({
  data() {
    return {
      client: null,
      accounts: [],
      selectedAccountId: '',
      selectedAccountType: '',
      transactions: []
    }
  },
  methods: {
    async fetchClientData() {
      try {
        const response = await fetch('/clients/home');
        const data = await response.json();

        if (!response.ok || !data.client) {
          alert(data.error || 'Erro ao carregar dados');
          window.location.replace('/clients/login');
          return;
        }

        this.client = data.client;
        this.accounts = data.accounts || [];
      } catch (err) {
        alert('Erro ao carregar dados');
        window.location.replace('/clients/login');
      }
    },

    async selectAccount(account) {
      this.selectedAccountId = account.id;
      this.selectedAccountType = account.type;
      await this.fetchTransactions(account.id);
    },

    async fetchTransactions(accountId) {
      try {
        const response = await fetch(`/transactions/${accountId}`);
        const data = await response.json();

        if (response.ok) {
          this.transactions = data;
        } else {
          this.transactions = [];
          alert(data.error || 'Erro ao carregar transações');
        }
      } catch {
        alert('Erro ao buscar transações');
      }
    },

    formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('pt-BR') + ' ' + date.toLocaleTimeString('pt-BR');
    }
  },
  mounted() {
    this.fetchClientData();
  }
}).mount('#app');
</script>

</body>
</html>
