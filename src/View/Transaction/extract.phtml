<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <title>Transações</title>
  <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
  <style>
    body {
      background-color: #121212;
      color: #f1f1f1;
      font-family: Arial, sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    .dashboard {
      background-color: #1e1e1e;
      padding: 30px 40px;
      border-radius: 12px;
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.5);
      width: 700px;
      max-height: 95vh;
      overflow-y: auto;
      text-align: center;
    }

    h2 {
      margin-bottom: 20px;
    }

    .accounts {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-bottom: 25px;
    }

    .account-card {
      background-color: #2a2a2a;
      padding: 15px 20px;
      border-radius: 8px;
      cursor: pointer;
      border: 2px solid transparent;
      transition: all 0.3s ease;
      text-align: left;
    }

    .account-card:hover {
      background-color: #333;
    }

    .account-card.active {
      border-color: rgb(11, 97, 196);
      background-color: #1d1d1d;
    }

    .account-card h3 {
      margin: 0 0 8px 0;
    }

    .transactions {
      text-align: left;
    }

    .transaction {
      background-color: #2a2a2a;
      padding: 12px 15px;
      border-radius: 6px;
      margin-bottom: 10px;
    }

    .transaction p {
      margin: 4px 0;
    }

    .back {
      display: block;
      margin-top: 15px;
      color: #ff5f5f;
      text-decoration: none;
      font-weight: bold;
    }

    .back:hover {
      color: #ff2f2f;
    }
  </style>
</head>
<body>

<div id="app" class="dashboard">
  <h2 v-if="client">Selecione a conta:</h2>

  <div class="accounts">
    <div v-for="account in accounts" :key="account.id"
         class="account-card"
         :class="{ active: selectedAccountId === account.id }"
         @click="selectAccount(account)">
      <h3>Conta {{ account.type.toUpperCase() }}</h3>
      <p>Saldo: R$ {{ account.balance.toFixed(2) }}</p>
      <p>Status: <span :style="{ color: account.active ? 'lightgreen' : 'red' }">
        {{ account.active ? 'Ativa' : 'Inativa' }}</span></p>
    </div>
  </div>

  <div v-if="transactions.length > 0" class="transactions">
    <h3>Transações da Conta {{ selectedAccountType.toUpperCase() }}</h3>
    <div v-for="transaction in transactions" :key="transaction.id" class="transaction">
      <p>
        <strong>Tipo:</strong>
        {{ transaction.transfer_id
            ? 'Transferência'
            : transaction.type === 'saque'
            ? 'Saque'
            : 'Depósito'}}
      </p>
      <p>
        <strong>{{ transaction.type === 'saque' ? 'Débito' : 'Crédito' }}:</strong>
        R$ {{ transaction.amount }}
      </p>
      <p><strong>Data:</strong> {{ formatDate(transaction.created_at) }}</p>
    </div>
  </div>

  <div v-else-if="selectedAccountId">
    <p>Não há transações para esta conta.</p>
  </div>

  <a href="/clients/auth" class="back">Voltar</a>
</div>

<script>
const { createApp } = Vue;

createApp({
  data() {
    return {
      client: null,
      accounts: [],
      selectedAccountId: '',
      selectedAccountType: '',
      transactions: []
    }
  },
  methods: {
    async fetchClientData() {
      try {
        const response = await fetch('/clients/home');
        const data = await response.json();

        if (!response.ok || !data.client) {
          alert(data.error || 'Erro ao carregar dados');
          window.location.replace('/clients/login');
          return;
        }

        this.client = data.client;
        this.accounts = data.accounts || [];
      } catch (err) {
        alert('Erro ao carregar dados');
        window.location.replace('/clients/login');
      }
    },

    async selectAccount(account) {
      this.selectedAccountId = account.id;
      this.selectedAccountType = account.type;
      await this.fetchTransactions(account.id);
    },

    async fetchTransactions(accountId) {
      try {
        const response = await fetch(`/transactions/${accountId}`);
        const data = await response.json();

        if (response.ok) {
          this.transactions = data;
        } else {
          this.transactions = [];
          alert(data.error || 'Erro ao carregar transações');
        }
      } catch {
        alert('Erro ao buscar transações');
      }
    },

    formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('pt-BR') + ' ' + date.toLocaleTimeString('pt-BR');
    }
  },
  mounted() {
    this.fetchClientData();
  }
}).mount('#app');
</script>

</body>
</html>
